# Amazon Data Analysis Project

## Overview
This project focuses on analyzing Amazon's business data using SQL to address 22 advanced business problems. The queries are designed to extract meaningful insights from sales, inventory, customer, and shipping data, enabling data-driven decision-making. The project also includes a stored procedure to automatically update inventory stock levels upon product sales.

## Project Objectives
The SQL queries in this project solve a variety of business problems, including:
- Analyzing top-selling products and categories by revenue.
- Calculating key metrics like Average Order Value (AOV), Customer Lifetime Value (CLTV), and product profit margins.
- Identifying trends, such as monthly sales and revenue decreases year-over-year.
- Detecting operational issues, like shipping delays, low stock alerts, and inactive sellers.
- Exploring customer behavior, including cross-sell opportunities and customer segmentation (new vs. returning).
- Evaluating shipping provider performance and payment success rates.

The final task includes a stored procedure to maintain inventory accuracy by reducing stock quantities in the inventory table whenever a sale is recorded.

## Prerequisites
To run the SQL queries, you need:
- A relational database management system (e.g., MySQL, PostgreSQL, SQL Server).
- A database schema with tables for:
  - Products (product_id, product_name, category, price, cost_of_goods)
  - Orders (order_id, customer_id, order_date, shipping_date, payment_status, shipping_provider)
  - Order_Items (order_id, product_id, quantity)
  - Customers (customer_id, name, state, registration_date)
  - Inventory (product_id, stock_quantity, last_restock_date, warehouse_id)
  - Sellers (seller_id, name, sales_data)
  - Returns (return_id, order_id, product_id, return_date)
- Basic knowledge of SQL for executing queries and stored procedures.

## Usage
1. **Set Up the Database**:
   - Create the necessary tables in your database.
   - Populate the tables with sample or real Amazon data (ensure compliance with data usage policies).

2. **Run the Queries**:
   - Open `Project Problems Statements.sql` in your SQL editor.
   - Execute each query individually to analyze specific business problems.
   - Adjust table names, column names, or thresholds (e.g., stock level < 10) to match your database schema.

3. **Stored Procedure**:
   - Implement the stored procedure to automatically update inventory stock when a sale is recorded.
   - Ensure the procedure is tested with sample sales data to verify stock updates.

4. **Analyze Results**:
   - Use the query results to generate reports, visualize trends, or inform business decisions.
   - For example, use the "Top Selling Products" query to prioritize inventory restocking or the "Cross-Sell Opportunities" query to design targeted marketing campaigns.

## Key Features
- **Comprehensive Analysis**: Covers sales, customer behavior, inventory, and operational efficiency.
- **Real-World Applications**: Queries address practical business challenges, such as identifying low-performing categories or high-value customers.
- **Automation**: The stored procedure ensures real-time inventory updates, reducing manual errors.
- **Scalable**: Queries can be adapted to larger datasets or modified for specific business needs.

## Business Problems Addressed
The project includes SQL queries for the following 22 business problems:
1. **Top Selling Products**: Query the top 10 products by total sales value, including product name, total quantity sold, and total sales value.
2. **Revenue by Category**: Calculate total revenue generated by each product category, including the percentage contribution of each category to total revenue.
3. **Average Order Value (AOV)**: Compute the average order value for each customer, including only customers with more than 5 orders.
4. **Monthly Sales Trend**: Query monthly total sales over the past year, displaying the sales trend by month and comparing current month sales to last month's sales.
5. **Customers with No Purchases**: Find customers who have registered but never placed an order, listing customer details and the time since their registration.
6. **Least-Selling Categories by State**: Identify the least-selling product category for each state, including the total sales for that category within each state.
7. **Customer Lifetime Value (CLTV)**: Calculate the total value of orders placed by each customer over their lifetime, ranking customers based on their CLTV.
8. **Inventory Stock Alerts**: Query products with stock levels below a certain threshold (e.g., less than 10 units), including last restock date and warehouse information.
9. **Shipping Delays**: Identify orders where the shipping date is later than 3 days after the order date, including customer, order details, and delivery provider.
10. **Payment Success Rate**: Calculate the percentage of successful payments across all orders, including breakdowns by payment status (e.g., failed, pending).
11. **Top Performing Sellers**: Find the top 5 sellers based on total sales value, including both successful and failed orders and their percentage of successful orders.
12. **Product Profit Margin**: Calculate the profit margin for each product (difference between price and cost of goods sold), ranking products by their profit margin from highest to lowest.
13. **Most Returned Products**: Query the top 10 products by the number of returns, displaying the return rate as a percentage of total units sold for each product.
14. **Orders Pending Shipment**: Find orders that have been paid but are still pending shipment, including order details, payment date, and customer information.
15. **Inactive Sellers**: Identify sellers who havenâ€™t made any sales in the last 6 months, showing the last sale date and total sales from those sellers.
16. **Identify Customers as Returning or New**: Categorize customers as returning (more than 5 returns) or new, listing customer ID, name, total orders, and total returns.
17. **Cross-Sell Opportunities**: Find customers who purchased product A but not product B (e.g., customers who bought AirPods but not AirPods Max), suggesting cross-sell opportunities by displaying matching product categories.
18. **Top 5 Customers by Orders in Each State**: Identify the top 5 customers with the highest number of orders for each state, including the number of orders and total sales for each customer.
19. **Revenue by Shipping Provider**: Calculate the total revenue handled by each shipping provider, including the total number of orders handled and the average delivery time for each provider.
20. **Top 10 Products with Highest Decreasing Revenue Ratio**: Compare 2022 and 2023 revenue to find the top 10 products with the highest revenue decrease ratio, including product ID, product name, category name, 2022 revenue, 2023 revenue, and decrease ratio (rounded).
21. **Stored Procedure for Inventory Management**: Create a function to reduce the quantity in the inventory table based on the product and quantity purchased whenever a sales record is added.