-- Solutions
-- EDA

SELECT * FROM customers;
SELECT * FROM inventory;
SELECT * FROM order_items;
SELECT * FROM orders;
SELECT * FROM payments;
SELECT 
	DISTINCT payment_status
FROM payments
SELECT * FROM products;
SELECT * FROM sellers;
SELECT * FROM shippings;

SELECT * 
FROM shippings
WHERE return_date IS NOT NULL;

SELECT * 
FROM orders

SELECT * 
FROM orders
WHERE order_id = 6747;


SELECT * 
FROM payments

SELECT * 
FROM payments
WHERE order_id = 6747;

SELECT * 
FROM shippings
WHERE return_date IS NOT NULL;

SELECT * 
FROM shippings
WHERE return_date IS NULL;


SELECT * FROM order_items;

-- ---------------------------------------
-- Amazon Business Problems
-- Advanced SQL
-- ---------------------------------------

/*
1. Top Selling Products
Query the top 10 products by total sales value.
Challenge: Include product name, total quantity sold, and total sales value.
*/
-- join oi -- o -- p
-- group by pid
-- total sale
-- top 10

	
-- Creating new column
ALTER TABLE order_items
ADD total_sale FLOAT;


SELECT * FROM order_items;

UPDATE order_items
SET total_sale = quantity * price_per_unit;
SELECT * FROM order_items;


SELECT * FROM order_items
ORDER BY quantity DESC;

SELECT TOP 10
    oi.product_id,
    p.product_name,
    SUM(oi.total_sale) AS total_sale,
    COUNT(o.order_id) AS total_orders
FROM orders AS o
JOIN order_items AS oi ON oi.order_id = o.order_id
JOIN products AS p ON p.product_id = oi.product_id
GROUP BY oi.product_id, p.product_name
ORDER BY total_sale DESC;


/*
2. Revenue by Category
Calculate total revenue generated by each product category.
Challenge: Include the percentage contribution of each category to total revenue.
*/

-- category_id, cate_name, total revene, total cotribution 
-- oi -- products -- cate
-- group by cat id and name sum total (oi)

SELECT 
    p.category_id,
    c.category_name,
    SUM(oi.total_sale) AS total_sale,
    SUM(oi.total_sale) * 100.0 / (SELECT SUM(total_sale) FROM order_items) AS contribution
FROM order_items AS oi
JOIN products AS p ON p.product_id = oi.product_id
LEFT JOIN category AS c ON c.category_id = p.category_id
GROUP BY p.category_id, c.category_name
ORDER BY total_sale DESC;



-- 


/*
3. Average Order Value (AOV)
Compute the average order value for each customer.
Challenge: Include only customers with more than 5 orders.
*/

-- o -- oi- cx
-- group by cx id and cx NAME sum(total sale)/no orders

-- cx rahul 2 

-- 1000/2
-- oi 5

SELECT 
    c.customer_id,
    CONCAT(c.first_name, ' ', c.last_name) AS full_name,
    SUM(oi.total_sale) * 1.0 / COUNT(DISTINCT o.order_id) AS AOV,
    COUNT(DISTINCT o.order_id) AS total_orders
FROM orders AS o
JOIN customers AS c ON c.customer_id = o.customer_id
JOIN order_items AS oi ON oi.order_id = o.order_id
GROUP BY c.customer_id, c.first_name, c.last_name
HAVING COUNT(DISTINCT o.order_id) > 5;




/*
4. Monthly Sales Trend
Query monthly total sales over the past year.
Challenge: Display the sales trend, grouping by month, return current_month sale, last month sale!
*/

-- last 1 year data 
-- each month -- their sale and their prev month sale
-- window lag

SELECT 
    year,
    month,
    current_month_sale,
    LAG(current_month_sale, 1) OVER (ORDER BY year, month) AS last_month_sale
FROM
(
    SELECT 
        YEAR(o.order_date) AS year,
        MONTH(o.order_date) AS month,
        ROUND(SUM(CAST(oi.total_sale AS DECIMAL(18,2))), 2) AS current_month_sale
    FROM orders o
    JOIN order_items oi ON oi.order_id = o.order_id
    WHERE o.order_date >= DATEADD(year, -1, CAST(GETDATE() AS date))
    GROUP BY YEAR(o.order_date), MONTH(o.order_date)
) AS t1
ORDER BY year, month;






/*
5. Customers with No Purchases
Find customers who have registered but never placed an order.
Challenge: List customer details and the time since their registration.
*/
--Approach 1
SELECT *
FROM customers
WHERE customer_id NOT IN (
    SELECT DISTINCT customer_id
    FROM orders
);




-- Approach 2
SELECT *
FROM customers AS c
LEFT JOIN orders AS o ON o.customer_id = c.customer_id
WHERE o.customer_id IS NULL;



-- 

/*
6. Least-Selling Categories by State
Identify the least-selling product category for each state.
Challenge: Include the total sales for that category within each state.
*/

WITH ranking_table AS (
    SELECT 
        c.state,
        cat.category_name,
        SUM(oi.total_sale) AS total_sale,
        RANK() OVER (PARTITION BY c.state ORDER BY SUM(oi.total_sale) ASC) AS rank
    FROM orders o
    JOIN customers c ON o.customer_id = c.customer_id
    JOIN order_items oi ON o.order_id = oi.order_id
    JOIN products p ON oi.product_id = p.product_id
    JOIN category cat ON cat.category_id = p.category_id
    GROUP BY c.state, cat.category_name
)
SELECT *
FROM ranking_table
WHERE rank = 1;

/*
7. Customer Lifetime Value (CLTV)
Calculate the total value of orders placed by each customer over their lifetime.
Challenge: Rank customers based on their CLTV.
*/

-- cx - o - oi
-- cx id group by sum(total_sale)
-- order by total sale 
-- rank 


SELECT 
    c.customer_id,
    CONCAT(c.first_name, ' ', c.last_name) AS full_name,
    SUM(oi.total_sale) AS CLTV,
    DENSE_RANK() OVER (ORDER BY SUM(oi.total_sale) DESC) AS cx_ranking
FROM orders o
JOIN customers c ON c.customer_id = o.customer_id
JOIN order_items oi ON oi.order_id = o.order_id
GROUP BY c.customer_id, c.first_name, c.last_name;



/*
8. Inventory Stock Alerts
Query products with stock levels below a certain threshold (e.g., less than 10 units).
Challenge: Include last restock date and warehouse information.
*/

SELECT 
    i.inventory_id,
    p.product_name,
    i.stock AS current_stock_left,
    i.last_stock_date,
    i.warehouse_id
FROM inventory AS i
JOIN products AS p ON p.product_id = i.product_id
WHERE i.stock < 10;




/*
9. Shipping Delays
Identify orders where the shipping date is later than 3 days after the order date.
Challenge: Include customer, order details, and delivery provider.
*/

-- cx -- o-- ship

SELECT 
    c.*,
    o.*,
    s.shipping_providers,
    DATEDIFF(day, o.order_date, s.shipping_date) AS days_took_to_ship
FROM orders o
JOIN customers c ON c.customer_id = o.customer_id
JOIN shippings s ON o.order_id = s.order_id
WHERE DATEDIFF(day, o.order_date, s.shipping_date) > 3;






/*
10. Payment Success Rate 
Calculate the percentage of successful payments across all orders.
Challenge: Include breakdowns by payment status (e.g., failed, pending).
*/

SELECT 
    p.payment_status,
    COUNT(*) AS total_cnt,
    ROUND(
        CAST(COUNT(*) AS FLOAT) / CAST((SELECT COUNT(*) FROM payments) AS FLOAT) * 100,
        2
    ) AS percentage
FROM orders o
JOIN payments p ON o.order_id = p.order_id
GROUP BY p.payment_status;




-- 



/*
11. Top Performing Sellers
Find the top 5 sellers based on total sales value.
Challenge: Include both successful and failed orders, and display their percentage of successful orders.
*/


WITH top_sellers AS (
    SELECT TOP 5
        s.seller_id,
        s.seller_name,
        SUM(oi.total_sale) AS total_sale
    FROM orders o
    JOIN sellers s ON o.seller_id = s.seller_id
    JOIN order_items oi ON oi.order_id = o.order_id
    GROUP BY s.seller_id, s.seller_name
    ORDER BY total_sale DESC
),
sellers_reports AS (
    SELECT 
        o.seller_id,
        ts.seller_name,
        o.order_status,
        COUNT(*) AS total_orders
    FROM orders o
    JOIN top_sellers ts ON ts.seller_id = o.seller_id
    WHERE o.order_status NOT IN ('Inprogress', 'Returned')
    GROUP BY o.seller_id, ts.seller_name, o.order_status
)
SELECT 
    seller_id,
    seller_name,
    SUM(CASE WHEN order_status = 'Completed' THEN total_orders ELSE 0 END) AS Completed_orders,
    SUM(CASE WHEN order_status = 'Cancelled' THEN total_orders ELSE 0 END) AS Cancelled_orders,
    SUM(total_orders) AS total_orders,
    CAST(
        SUM(CASE WHEN order_status = 'Completed' THEN total_orders ELSE 0 END) AS FLOAT
    ) / CAST(SUM(total_orders) AS FLOAT) * 100 AS successful_orders_percentage
FROM sellers_reports
GROUP BY seller_id, seller_name;


-- 

/*
12. Product Profit Margin
Calculate the profit margin for each product (difference between price and cost of goods sold).
Challenge: Rank products by their profit margin, showing highest to lowest.
*/

-- o - oi - prod
-- group pid sum(total_sale - cogs * qty) as profit

SELECT 
    product_id,
    product_name,
    profit_margin,
    DENSE_RANK() OVER (ORDER BY profit_margin DESC) AS product_ranking
FROM (
    SELECT 
        p.product_id,
        p.product_name,
        SUM(oi.total_sale - (p.cogs * oi.quantity)) * 100.0 / SUM(oi.total_sale) AS profit_margin
    FROM order_items oi
    JOIN products p ON oi.product_id = p.product_id
    GROUP BY p.product_id, p.product_name
) AS t1;



/*
13. Most Returned Products
Query the top 10 products by the number of returns.
Challenge: Display the return rate as a percentage of total units sold for each product.
*/


SELECT 
    p.product_id,
    p.product_name,
    COUNT(*) AS total_unit_sold,
    SUM(CASE WHEN o.order_status = 'Returned' THEN 1 ELSE 0 END) AS total_returned,
    CAST(SUM(CASE WHEN o.order_status = 'Returned' THEN 1 ELSE 0 END) AS FLOAT) / CAST(COUNT(*) AS FLOAT) * 100 AS return_percentage
FROM order_items oi
JOIN products p ON oi.product_id = p.product_id
JOIN orders o ON o.order_id = oi.order_id
GROUP BY p.product_id, p.product_name
ORDER BY return_percentage DESC;



/*
14. Orders Pending Shipment
Find orders that have been paid but are still pending shipment.
Challenge: Include order details, payment date, and customer information.
*/

SELECT 
    o.order_id,
    o.order_date,
    p.payment_date,
    p.payment_status,
    CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
    c.customer_id,
    o.order_status,
    s.shipping_date,
    s.shipping_providers
FROM orders o
JOIN payments p ON o.order_id = p.order_id
JOIN customers c ON o.customer_id = c.customer_id
LEFT JOIN shippings s ON o.order_id = s.order_id
WHERE 
    p.payment_status = 'Paid'              -- payment completed
    AND (s.shipping_date IS NULL OR s.shipping_date > GETDATE())  -- no shipment done yet or shipment date is in the future
    AND o.order_status NOT IN ('Shipped', 'Delivered');  -- exclude shipped/delivered orders




/*
15. Inactive Sellers
Identify sellers who haven’t made any sales in the last 6 months.
Challenge: Show the last sale date and total sales from those sellers.
*/

WITH inactive_sellers AS (
    SELECT s.seller_id, s.seller_name
    FROM sellers s
    WHERE s.seller_id NOT IN (
        SELECT DISTINCT seller_id
        FROM orders
        WHERE order_date >= DATEADD(month, -6, CAST(GETDATE() AS DATE))
    )
)

SELECT 
    s.seller_id,
    MAX(o.order_date) AS last_sale_date,
    MAX(oi.total_sale) AS last_sale_amount
FROM inactive_sellers s
LEFT JOIN orders o ON s.seller_id = o.seller_id
LEFT JOIN order_items oi ON o.order_id = oi.order_id
GROUP BY s.seller_id;



-- 

/*
16. IDENTITY customers into returning or new
if the customer has done more than 5 return categorize them as returning otherwise new
Challenge: List customers id, name, total orders, total returns*/
SELECT 
    c_full_name AS customers,
    total_orders,
    total_return,
    CASE
        WHEN total_return > 5 THEN 'Returning_customers' 
        ELSE 'New'
    END AS cx_category
FROM
(
    SELECT 
        CONCAT(c.first_name, ' ', c.last_name) AS c_full_name,
        COUNT(o.order_id) AS total_orders,
        SUM(CASE WHEN o.order_status = 'Returned' THEN 1 ELSE 0 END) AS total_return    
    FROM orders o
    JOIN customers c ON c.customer_id = o.customer_id
    JOIN order_items oi ON oi.order_id = o.order_id
    GROUP BY CONCAT(c.first_name, ' ', c.last_name)
) AS customer_returns
ORDER BY total_return DESC, total_orders DESC;




/*
17. Top 5 Customers by Orders in Each State
Identify the top 5 customers with the highest number of orders for each state.
Challenge: Include the number of orders and total sales for each customer.
*/

SELECT *
FROM (
    SELECT 
        c.state,
        CONCAT(c.first_name, ' ', c.last_name) AS customers,
        COUNT(o.order_id) AS total_orders,
        SUM(oi.total_sale) AS total_sale,
        DENSE_RANK() OVER (PARTITION BY c.state ORDER BY COUNT(o.order_id) DESC) AS rank
    FROM orders o
    JOIN order_items oi ON oi.order_id = o.order_id
    JOIN customers c ON c.customer_id = o.customer_id
    GROUP BY c.state, CONCAT(c.first_name, ' ', c.last_name)
) AS t1
WHERE rank <= 5;





-- 


/*
18. Revenue by Shipping Provider
Calculate the total revenue handled by each shipping provider.
Challenge: Include the total number of orders handled and the average delivery time for each provider.
*/

-- oi - o - shipping
-- group by shipping provider id sum(total sale), total orders 
SELECT 
    s.shipping_providers,
    COUNT(o.order_id) AS order_handled,
    SUM(oi.total_sale) AS total_sale,
    COALESCE(AVG(DATEDIFF(day, s.shipping_date, s.return_date)), 0) AS average_days
FROM orders o
JOIN order_items oi ON oi.order_id = o.order_id
JOIN shippings s ON s.order_id = o.order_id
GROUP BY s.shipping_providers;

SELECT * FROM shippings





/*
19. Top 10 product with highest decreasing revenue ratio compare to last year(2022) and current_year(2023)
Challenge: Return product_id, product_name, category_name, 2022 revenue and 2023 revenue decrease ratio at end Round the result
Note: Decrease ratio = cr-ls/ls* 100 (cs = current_year ls=last_year)
*/

-- join o -oi- p 
-- filter 2022
-- group by p id sum(total sale) 


-- join o -oi- p 
-- filter 2023
-- group by p id sum(total sale) 

-- join 1 -2 


WITH last_year_sale AS (
    SELECT 
        p.product_id,
        p.product_name,
        SUM(oi.total_sale) AS revenue
    FROM orders o
    JOIN order_items oi ON oi.order_id = o.order_id
    JOIN products p ON p.product_id = oi.product_id
    WHERE YEAR(o.order_date) = 2022
    GROUP BY p.product_id, p.product_name
),

current_year_sale AS (
    SELECT 
        p.product_id,
        p.product_name,
        SUM(oi.total_sale) AS revenue
    FROM orders o
    JOIN order_items oi ON oi.order_id = o.order_id
    JOIN products p ON p.product_id = oi.product_id
    WHERE YEAR(o.order_date) = 2023
    GROUP BY p.product_id, p.product_name
)

SELECT TOP 10
    cs.product_id,
    ls.revenue AS last_year_revenue,
    cs.revenue AS current_year_revenue,
    ls.revenue - cs.revenue AS rev_diff,
    ROUND(
        CASE 
            WHEN ls.revenue = 0 THEN NULL
            ELSE CAST((cs.revenue - ls.revenue) AS DECIMAL(18, 2)) / CAST(ls.revenue AS DECIMAL(18, 2)) * 100
        END
    , 2) AS revenue_dec_ratio
FROM last_year_sale ls
JOIN current_year_sale cs ON ls.product_id = cs.product_id
WHERE ls.revenue > cs.revenue
ORDER BY revenue_dec_ratio DESC
OPTION (RECOMPILE);



/*
20. Top 10 product with highest decreasing revenue ratio compare to last year(2022) and current_year(2023)
Challenge: Return product_id, product_name, category_name, 2022 revenue and 2023 revenue decrease ratio at end Round the result

Note: Decrease ratio = cr-ls/ls* 100 (cs = current_year ls=last_year)
*/


WITH last_year_sale AS (
    SELECT 
        p.product_id,
        p.product_name,
        c.category_name,
        SUM(oi.total_sale) AS revenue_2022
    FROM orders o
    JOIN order_items oi ON o.order_id = oi.order_id
    JOIN products p ON oi.product_id = p.product_id
    LEFT JOIN category c ON p.category_id = c.category_id
    WHERE YEAR(o.order_date) = 2022
    GROUP BY p.product_id, p.product_name, c.category_name
),
current_year_sale AS (
    SELECT 
        p.product_id,
        p.product_name,
        SUM(oi.total_sale) AS revenue_2023
    FROM orders o
    JOIN order_items oi ON o.order_id = oi.order_id
    JOIN products p ON oi.product_id = p.product_id
    WHERE YEAR(o.order_date) = 2023
    GROUP BY p.product_id, p.product_name
)

SELECT 
    ls.product_id,
    ls.product_name,
    ls.category_name,
    ls.revenue_2022,
    ISNULL(cs.revenue_2023, 0) AS revenue_2023,
    ROUND(
        CAST((ISNULL(cs.revenue_2023, 0) - ls.revenue_2022) AS FLOAT) / NULLIF(ls.revenue_2022, 0) * 100, 
        2
    ) AS decrease_ratio
FROM last_year_sale ls
LEFT JOIN current_year_sale cs ON ls.product_id = cs.product_id
WHERE ls.revenue_2022 > ISNULL(cs.revenue_2023, 0)
ORDER BY decrease_ratio ASC  -- Most negative (highest decrease)
OFFSET 0 ROWS FETCH NEXT 10 ROWS ONLY;



-- Store PROCEDURE





/*
Final Task
-- Store Procedure
create a function as soon as the product is sold the the same quantity should reduced from inventory table
after adding any sales records it should update the stock in the inventory table based on the product and qty purchased
-- 
*/

IF OBJECT_ID('dbo.add_sales', 'P') IS NOT NULL
    DROP PROCEDURE dbo.add_sales;
GO

CREATE PROCEDURE dbo.add_sales
    @p_order_id INT,
    @p_customer_id INT,
    @p_seller_id INT,
    @p_order_item_id INT,
    @p_product_id INT,
    @p_quantity INT
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @v_count INT;
    DECLARE @v_price FLOAT;
    DECLARE @v_product VARCHAR(50);

    -- Get product price and name
    SELECT 
        @v_price = price, 
        @v_product = product_name
    FROM products
    WHERE product_id = @p_product_id;

    -- Check stock availability
    SELECT 
        @v_count = COUNT(*)
    FROM inventory
    WHERE product_id = @p_product_id
      AND stock >= @p_quantity;

    IF @v_count > 0
    BEGIN
        -- Insert order with order_status
        INSERT INTO orders (order_id, order_date, customer_id, seller_id, order_status)
        VALUES (@p_order_id, CAST(GETDATE() AS DATE), @p_customer_id, @p_seller_id, 'Pending');

        -- Insert order item
        INSERT INTO order_items (order_item_id, order_id, product_id, quantity, price_per_unit, total_sale)
        VALUES (@p_order_item_id, @p_order_id, @p_product_id, @p_quantity, @v_price, @v_price * @p_quantity);

        -- Update inventory
        UPDATE inventory
        SET stock = stock - @p_quantity
        WHERE product_id = @p_product_id;

        PRINT 'Thank you, product: ' + @v_product + ' sale has been added and inventory stock updated.';
    END
    ELSE
    BEGIN
        PRINT 'Sorry, the product: ' + @v_product + ' is not available in sufficient quantity.';
    END
END
GO

EXEC dbo.add_sales 25005, 2, 5, 25004, 1, 14;

